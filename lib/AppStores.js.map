{"version":3,"sources":["../src/AppStores.jsx"],"names":["AppStores","stores","getStoreState","storeName","appstates","dispatch","type","state","preStates","listeners","forEach","dispatchListeners","l","push","length","merge","setStoreState","keys","connectors","connector","update","connects","intersection","handle","states","addDispatchListener","listener","key","uniqueId","removeDispatchListener","storestate","k","addStore","store","actionFactory","appactions","getState","value","delStore"],"mappings":"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","file":"AppStores.js","sourcesContent":["import _ from 'lodash'\n\nclass AppStores {\n  constructor({ stores }) {\n    this.stores = stores\n    this.connectors = {}  // 所有连接器\n    this.appstates = {} // 所有状态\n    this.appactions = {} // 所有动作\n    this.dispatchListeners = {} // 分发事件监听器\n\n     // 初始化appstates和appactions\n    _.forEach(stores, (store, storeName) => {\n      this.addStore(storeName, store)\n    })\n  }\n  getStoreState = (storeName) => this.appstates[storeName]\n  dispatch = (storeName, { type, state }) => {\n    const preStates = {}\n    const listeners = []\n    _.forEach(this.dispatchListeners, (l) => {\n      if (l.storeName === storeName && l.type === type) {\n        listeners.push(l)\n      }\n    })\n    if (listeners.length > 0) {\n      _.merge(preStates, this.appstates)\n    }\n    this.setStoreState(storeName, state)\n\n    // 更新状态到连接器中\n    const keys = _.keys(state)\n    _.forEach(this.connectors, (connector) => {\n      const { update, connects } = connector\n      // 如果该连接器的连接列表中，有当前storeName且\n      if (_.intersection(connects[storeName], keys).length > 0) {\n        update()\n      }\n    })\n\n    // 回调函数\n    if (listeners.length) {\n      _.forEach(listeners, (l) => {\n        l.handle({ type, storeName, preStates, states: this.appstates })\n      })\n    }\n  }\n  addDispatchListener = (listener) => {\n    const key = _.uniqueId('listener_')\n    this.dispatchListeners[key] = listener\n    return key\n  }\n  removeDispatchListener = (key) => {\n    if (this.dispatchListeners[key]) {\n      delete this.dispatchListeners[key]\n    }\n  }\n  setStoreState = (storeName, state) => {\n    const storestate = this.appstates[storeName]\n    if (storestate) {\n      const keys = _.keys(state)\n      _.forEach(keys, (k) => {\n        storestate[k] = state[k]\n      })\n    }\n  }\n  addStore = (storeName, store) => {\n    this.stores[storeName] = store\n\n    const { state, actionFactory } = store\n    // 初始化appstates\n    this.appstates[storeName] = {}\n    _.merge(this.appstates[storeName], state)\n    // 初始化appactions\n    this.appactions[storeName] = {}\n    _.merge(this.appactions[storeName], actionFactory({\n      getState: () => this.getStoreState(storeName),\n      dispatch: (value) => this.dispatch(storeName, value),\n    }))\n  }\n  delStore = (storeName) => {\n    if (this.appstates[storeName]) {\n      delete this.appstates[storeName]\n    }\n    if (this.appstates[storeName]) {\n      delete this.appstates[storeName]\n    }\n    if (this.appactions[storeName]) {\n      delete this.appactions[storeName]\n    }\n  }\n}\n\nexport default AppStores\n"]}