{"version":3,"sources":["../src/AppStores.jsx"],"names":["AppStores","stores","getStoreState","storeName","appstates","dispatch","type","state","preStates","didDispatch","merge","setStoreState","keys","forEach","connectors","connector","update","connects","intersection","length","states","storestate","k","appactions","store","actionFactory","getState","value"],"mappings":";;;;;;AAAA;;;;;;;;IAEMA,S,GACJ,yBAAwB;AAAA;;AAAA,MAAVC,MAAU,QAAVA,MAAU;;AAAA;;AAAA,OAmBxBC,aAnBwB,GAmBR,UAACC,SAAD;AAAA,WAAe,MAAKC,SAAL,CAAeD,SAAf,CAAf;AAAA,GAnBQ;;AAAA,OAoBxBE,QApBwB,GAoBb,UAACF,SAAD,SAAgC;AAAA,QAAlBG,IAAkB,SAAlBA,IAAkB;AAAA,QAAZC,KAAY,SAAZA,KAAY;;AACzC,QAAMC,YAAY,EAAlB;AACA,QAAI,MAAKC,WAAT,EAAsB;AACpB,uBAAEC,KAAF,CAAQF,SAAR,EAAmB,MAAKJ,SAAxB;AACD;AACD,UAAKO,aAAL,CAAmBR,SAAnB,EAA8BI,KAA9B;;AAEA;AACA,QAAMK,OAAO,iBAAEA,IAAF,CAAOL,KAAP,CAAb;AACA,qBAAEM,OAAF,CAAU,MAAKC,UAAf,EAA2B,UAACC,SAAD,EAAe;AAAA,UAChCC,MADgC,GACXD,SADW,CAChCC,MADgC;AAAA,UACxBC,QADwB,GACXF,SADW,CACxBE,QADwB;AAExC;;AACA,UAAI,iBAAEC,YAAF,CAAeD,SAASd,SAAT,CAAf,EAAoCS,IAApC,EAA0CO,MAA1C,GAAmD,CAAvD,EAA0D;AACxDH;AACD;AACF,KAND;;AAQA;AACA,QAAI,MAAKP,WAAT,EAAsB;AACpB,YAAKA,WAAL,CAAiB,EAAEH,UAAF,EAAQH,oBAAR,EAAmBK,oBAAnB,EAA8BY,QAAQ,MAAKhB,SAA3C,EAAjB;AACD;AACF,GAzCuB;;AAAA,OA0CxBO,aA1CwB,GA0CR,UAACR,SAAD,EAAYI,KAAZ,EAAsB;AACpC,QAAMc,aAAa,MAAKjB,SAAL,CAAeD,SAAf,CAAnB;AACA,QAAIkB,UAAJ,EAAgB;AACd,UAAMT,OAAO,iBAAEA,IAAF,CAAOL,KAAP,CAAb;AACA,uBAAEM,OAAF,CAAUD,IAAV,EAAgB,UAACU,CAAD,EAAO;AACrBD,mBAAWC,CAAX,IAAgBf,MAAMe,CAAN,CAAhB;AACD,OAFD;AAGD;AACF,GAlDuB;;AACtB,OAAKrB,MAAL,GAAcA,MAAd;AACA,OAAKa,UAAL,GAAkB,EAAlB,CAFsB,CAEA;AACtB,OAAKV,SAAL,GAAiB,EAAjB,CAHsB,CAGF;AACpB,OAAKmB,UAAL,GAAkB,EAAlB,CAJsB,CAID;;AAEpB;AACD,mBAAEV,OAAF,CAAUZ,MAAV,EAAkB,UAACuB,KAAD,EAAQrB,SAAR,EAAsB;AAAA,QAC9BI,KAD8B,GACLiB,KADK,CAC9BjB,KAD8B;AAAA,QACvBkB,aADuB,GACLD,KADK,CACvBC,aADuB;AAEtC;;AACA,UAAKrB,SAAL,CAAeD,SAAf,IAA4BI,KAA5B;AACA;AACA,UAAKgB,UAAL,CAAgBpB,SAAhB,IAA6B,EAA7B;AACA,qBAAEO,KAAF,CAAQ,MAAKa,UAAL,CAAgBpB,SAAhB,CAAR,EAAoCsB,cAAc;AAChDC,gBAAU;AAAA,eAAM,MAAKxB,aAAL,CAAmBC,SAAnB,CAAN;AAAA,OADsC;AAEhDE,gBAAU,kBAACsB,KAAD;AAAA,eAAW,MAAKtB,QAAL,CAAcF,SAAd,EAAyBwB,KAAzB,CAAX;AAAA;AAFsC,KAAd,CAApC;AAID,GAVD;AAWD,C;;kBAmCY3B,S","file":"AppStores.js","sourcesContent":["import _ from 'lodash'\n\nclass AppStores {\n  constructor({ stores }) {\n    this.stores = stores\n    this.connectors = {}  // 所有连接器\n    this.appstates = {} // 所有状态\n    this.appactions = {} // 所有动作\n\n     // 初始化appstates和appactions\n    _.forEach(stores, (store, storeName) => {\n      const { state, actionFactory } = store\n      // 初始化appstates\n      this.appstates[storeName] = state\n      // 初始化appactions\n      this.appactions[storeName] = {}\n      _.merge(this.appactions[storeName], actionFactory({\n        getState: () => this.getStoreState(storeName),\n        dispatch: (value) => this.dispatch(storeName, value),\n      }))\n    })\n  }\n  getStoreState = (storeName) => this.appstates[storeName]\n  dispatch = (storeName, { type, state }) => {\n    const preStates = {}\n    if (this.didDispatch) {\n      _.merge(preStates, this.appstates)\n    }\n    this.setStoreState(storeName, state)\n\n    // 更新状态到连接器中\n    const keys = _.keys(state)\n    _.forEach(this.connectors, (connector) => {\n      const { update, connects } = connector\n      // 如果该连接器的连接列表中，有当前storeName且\n      if (_.intersection(connects[storeName], keys).length > 0) {\n        update()\n      }\n    })\n\n    // 回调函数\n    if (this.didDispatch) {\n      this.didDispatch({ type, storeName, preStates, states: this.appstates })\n    }\n  }\n  setStoreState = (storeName, state) => {\n    const storestate = this.appstates[storeName]\n    if (storestate) {\n      const keys = _.keys(state)\n      _.forEach(keys, (k) => {\n        storestate[k] = state[k]\n      })\n    }\n  }\n}\n\nexport default AppStores\n"]}