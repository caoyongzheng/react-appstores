{"version":3,"sources":["../src/StoreSet.js"],"names":["StoreSet","addStore","name","store","stores","isEmpty","storeSetDispatch","dispatch","getStore","delStore","type","state","connectors","dispatchListeners","newKeys","keys","preState","merge","forEach","v","k","c","update","connects","intersection","length","h","addDispatchListener","listener","key","uniqueId","removeDispatchListener"],"mappings":"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","file":"StoreSet.js","sourcesContent":["import _ from 'lodash'\n\nexport default class StoreSet {\n  constructor() {\n    this.stores = {}\n    this.connectors = {}  // 所有连接器\n    this.dispatchListeners = {} // 分发事件监听函数\n  }\n  addStore = (name, store) => {\n    const { stores } = this\n    // check the name whether exist,if exist,then thow err.\n    if (stores[name]) {\n      throw `the store \"${name}\" is already exist, can't add again`\n    }\n\n    if (_.isEmpty(store)) {\n      throw `the store \"${name}\" can't be empty`\n    }\n    store.name = name\n    store.storeSetDispatch = this.dispatch\n    stores[name] = store\n  }\n  getStore = (name) => this.stores[name]\n  delStore = (name) => {\n    const { stores } = this\n    if (stores[name]) {\n      delete stores[name]\n    }\n  }\n  dispatch = (name, { type, state }) => {\n    const { stores, connectors, dispatchListeners } = this\n    if (stores[name]) {\n      const store = stores[name]\n      const newKeys = _.keys(state)\n      const preState = {}\n      if (dispatchListeners[name]) {\n        _.merge(preState, stores[name].state)\n      }\n\n      // update the store state\n      _.forEach(state, (v, k) => {\n        store.state[k] = v\n      })\n\n      // notify the connectors to update\n      _.forEach(connectors, (c) => {\n        const { update, connects } = c\n        if (_.intersection(connects[name], newKeys).length > 0) {\n          update()\n        }\n      })\n\n      // dispatch callBack\n      if (dispatchListeners[name]) {\n        _.forEach(dispatchListeners[name], (h) => h({ name, type, preState, state: store.state }))\n      }\n    }\n  }\n  addDispatchListener = (name, listener) => {\n    const key = _.uniqueId(`listener_${name}_`)\n    if (!this.dispatchListeners[name]) {\n      this.dispatchListeners[name] = {}\n    }\n    this.dispatchListeners[name][key] = listener\n    return key\n  }\n  removeDispatchListener = (name, key) => {\n    if (this.dispatchListeners[name] && this.dispatchListeners[name][key]) {\n      delete this.dispatchListeners[name][key]\n    }\n  }\n}\n"]}